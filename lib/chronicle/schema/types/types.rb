# Generated by Chronicle::Schema::Generator
# from /Users/alouis/Documents/projects/chronicle/chronicle-core/lib/chronicle/schema/data/schema.ttl
#
# Do not edit directly!
# To edit, make a change to the schema.ttl file and run `rake schema:generate`
#
module Chronicle::Schema::Types
DataTypeSchema = Dry::Schema.Params do
  required(:type).filled(:string, eql?: 'entities')
  required(:attributes).schema do
    required(:represents).filled(:string, eql?: 'DataType')
  end
  required(:meta).schema(Chronicle::Schema::Types::Base::DedupeOnSchema)
  required(:relationships).schema do
    
  end
end

TextSchema = Dry::Schema.Params do
  required(:type).filled(:string, eql?: 'entities')
  required(:attributes).schema do
    required(:represents).filled(:string, eql?: 'Text')
  end
  required(:meta).schema(Chronicle::Schema::Types::Base::DedupeOnSchema)
  required(:relationships).schema do
    
  end
end

EntitySchema = Dry::Schema.Params do
  required(:type).filled(:string, eql?: 'entities')
  required(:attributes).schema do
    required(:represents).filled(:string, eql?: 'Entity')
  end
  required(:meta).schema(Chronicle::Schema::Types::Base::DedupeOnSchema)
  required(:relationships).schema do
    optional(:name).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

optional(:description).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

  end
end

PersonSchema = Dry::Schema.Params do
  required(:type).filled(:string, eql?: 'entities')
  required(:attributes).schema do
    required(:represents).filled(:string, eql?: 'Person')
  end
  required(:meta).schema(Chronicle::Schema::Types::Base::DedupeOnSchema)
  required(:relationships).schema do
    optional(:name).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

optional(:description).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

  end
end

MusicGroupSchema = Dry::Schema.Params do
  required(:type).filled(:string, eql?: 'entities')
  required(:attributes).schema do
    required(:represents).filled(:string, eql?: 'MusicGroup')
  end
  required(:meta).schema(Chronicle::Schema::Types::Base::DedupeOnSchema)
  required(:relationships).schema do
    optional(:name).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

optional(:description).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

  end
end

RockGroupSchema = Dry::Schema.Params do
  required(:type).filled(:string, eql?: 'entities')
  required(:attributes).schema do
    required(:represents).filled(:string, eql?: 'RockGroup')
  end
  required(:meta).schema(Chronicle::Schema::Types::Base::DedupeOnSchema)
  required(:relationships).schema do
    optional(:hair_length).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

optional(:name).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

optional(:description).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

  end
end

MusicAlbumSchema = Dry::Schema.Params do
  required(:type).filled(:string, eql?: 'entities')
  required(:attributes).schema do
    required(:represents).filled(:string, eql?: 'MusicAlbum')
  end
  required(:meta).schema(Chronicle::Schema::Types::Base::DedupeOnSchema)
  required(:relationships).schema do
    optional(:by_artist).schema do
  required(:data).value(:array).each do
    hash(Chronicle::Schema::Types::MusicGroupSchema | Chronicle::Schema::Types::PersonSchema | Chronicle::Schema::Types::TextSchema | Chronicle::Schema::Types::RockGroupSchema)
  end
end

optional(:name).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

optional(:description).schema do
  required(:data).hash(Chronicle::Schema::Types::TextSchema)
end

  end
end

end
